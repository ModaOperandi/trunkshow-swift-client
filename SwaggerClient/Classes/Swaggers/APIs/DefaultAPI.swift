//
// DefaultAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class DefaultAPI {
    /**
     - parameter commentId: (path)       - parameter trunkshowId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trunkshowsTrunkshowIdBackstageCommentsCommentIdPut(commentId: UUID, trunkshowId: Int, completion: @escaping ((_ data: BackstageItem?,_ error: Error?) -> Void)) {
        trunkshowsTrunkshowIdBackstageCommentsCommentIdPutWithRequestBuilder(commentId: commentId, trunkshowId: trunkshowId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /trunkshows/{trunkshow_id}/backstage/comments/{comment_id}
     - Publish a new backstage comment
     - examples: [{contentType=application/json, example={
  "image_url" : "image_url",
  "product_id" : 0,
  "comment" : "comment",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "trunkshow_id" : 6,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter commentId: (path)       - parameter trunkshowId: (path)  

     - returns: RequestBuilder<BackstageItem> 
     */
    open class func trunkshowsTrunkshowIdBackstageCommentsCommentIdPutWithRequestBuilder(commentId: UUID, trunkshowId: Int) -> RequestBuilder<BackstageItem> {
        var path = "/trunkshows/{trunkshow_id}/backstage/comments/{comment_id}"
        let commentIdPreEscape = "\(commentId)"
        let commentIdPostEscape = commentIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{comment_id}", with: commentIdPostEscape, options: .literal, range: nil)
        let trunkshowIdPreEscape = "\(trunkshowId)"
        let trunkshowIdPostEscape = trunkshowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trunkshow_id}", with: trunkshowIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BackstageItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter imageId: (path)       - parameter trunkshowId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trunkshowsTrunkshowIdBackstageImagesImageIdPut(imageId: UUID, trunkshowId: Int, completion: @escaping ((_ data: BackstageItem?,_ error: Error?) -> Void)) {
        trunkshowsTrunkshowIdBackstageImagesImageIdPutWithRequestBuilder(imageId: imageId, trunkshowId: trunkshowId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /trunkshows/{trunkshow_id}/backstage/images/{image_id}
     - Publish a new backstage image
     - examples: [{contentType=application/json, example={
  "image_url" : "image_url",
  "product_id" : 0,
  "comment" : "comment",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "trunkshow_id" : 6,
  "tags" : [ "tags", "tags" ]
}}]
     - parameter imageId: (path)       - parameter trunkshowId: (path)  

     - returns: RequestBuilder<BackstageItem> 
     */
    open class func trunkshowsTrunkshowIdBackstageImagesImageIdPutWithRequestBuilder(imageId: UUID, trunkshowId: Int) -> RequestBuilder<BackstageItem> {
        var path = "/trunkshows/{trunkshow_id}/backstage/images/{image_id}"
        let imageIdPreEscape = "\(imageId)"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{image_id}", with: imageIdPostEscape, options: .literal, range: nil)
        let trunkshowIdPreEscape = "\(trunkshowId)"
        let trunkshowIdPostEscape = trunkshowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trunkshow_id}", with: trunkshowIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<BackstageItem>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     - parameter imageId: (path)       - parameter trunkshowId: (path)       - parameter productId: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func trunkshowsTrunkshowIdBackstageItemsGet(imageId: UUID, trunkshowId: Int, productId: Int? = nil, completion: @escaping ((_ data: BackstageItems?,_ error: Error?) -> Void)) {
        trunkshowsTrunkshowIdBackstageItemsGetWithRequestBuilder(imageId: imageId, trunkshowId: trunkshowId, productId: productId).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /trunkshows/{trunkshow_id}/backstage/items
     - Gets an array of backstage items for a trunkshow
     - examples: [{contentType=application/json, example={
  "items" : [ {
    "image_url" : "image_url",
    "product_id" : 0,
    "comment" : "comment",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "trunkshow_id" : 6,
    "tags" : [ "tags", "tags" ]
  }, {
    "image_url" : "image_url",
    "product_id" : 0,
    "comment" : "comment",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "trunkshow_id" : 6,
    "tags" : [ "tags", "tags" ]
  } ]
}}]
     - parameter imageId: (path)       - parameter trunkshowId: (path)       - parameter productId: (query)  (optional)

     - returns: RequestBuilder<BackstageItems> 
     */
    open class func trunkshowsTrunkshowIdBackstageItemsGetWithRequestBuilder(imageId: UUID, trunkshowId: Int, productId: Int? = nil) -> RequestBuilder<BackstageItems> {
        var path = "/trunkshows/{trunkshow_id}/backstage/items"
        let imageIdPreEscape = "\(imageId)"
        let imageIdPostEscape = imageIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{image_id}", with: imageIdPostEscape, options: .literal, range: nil)
        let trunkshowIdPreEscape = "\(trunkshowId)"
        let trunkshowIdPostEscape = trunkshowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{trunkshow_id}", with: trunkshowIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
                        "product_id": productId?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<BackstageItems>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
